{% extends "base.html" %}

{% block title %}AI-Socratic-Clarifier - Chat{% endblock %}

{% block additional_css %}
<style>
    .chat-container {
        height: calc(100vh - 230px);
        min-height: 400px;
        display: flex;
        flex-direction: column;
    }
    
    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 15px;
        background-color: var(--background-color);
        border-radius: 10px;
        border: 1px solid var(--border-color);
    }
    
    .message {
        margin-bottom: 15px;
        max-width: 80%;
        padding: 12px 16px;
        border-radius: 18px;
        position: relative;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        animation: fadeIn 0.3s ease;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .user-message {
        background-color: #dcf8c6;
        margin-left: auto;
        border-bottom-right-radius: 5px;
    }
    
    .assistant-message {
        background-color: #f1f0f0;
        margin-right: auto;
        border-bottom-left-radius: 5px;
    }
    
    .system-message {
        background-color: #e3f2fd;
        max-width: 100%;
        margin: 10px auto;
        font-style: italic;
        text-align: center;
        font-size: 0.9rem;
    }
    
    .message-issues {
        margin-top: 12px;
        padding: 10px;
        background-color: #fff3cd;
        border-radius: 8px;
        font-size: 0.9rem;
    }
    
    .message-questions {
        margin-top: 12px;
        padding: 10px;
        background-color: #d1ecf1;
        border-radius: 8px;
        font-size: 0.9rem;
    }
    
    .message-reasoning {
        margin-top: 12px;
        padding: 10px;
        background-color: #e2e3e5;
        border-radius: 8px;
        font-size: 0.9rem;
        font-family: monospace;
        white-space: pre-wrap;
    }
    
    .message-document {
        margin-top: 12px;
        padding: 10px;
        background-color: #f8eeff;
        border-radius: 8px;
        font-size: 0.9rem;
        border-left: 3px solid #9c27b0;
    }
    
    .chat-input {
        margin-top: 15px;
        display: flex;
    }
    
    .chat-input-wrapper {
        position: relative;
        flex-grow: 1;
    }
    
    .chat-input textarea {
        width: 100%;
        border-radius: 20px;
        padding: 12px 50px 12px 15px;
        resize: none;
        border: 1px solid var(--border-color);
        background-color: var(--card-bg);
        color: var(--text-color);
    }
    
    .chat-input button {
        margin-left: 10px;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .input-actions {
        position: absolute;
        right: 15px;
        top: 10px;
    }
    
    .input-action-btn {
        background: none;
        border: none;
        color: var(--text-light);
        cursor: pointer;
        padding: 5px;
        font-size: 1.2rem;
        transition: color 0.2s;
    }
    
    .input-action-btn:hover {
        color: var(--primary-color);
    }
    
    .typing-indicator {
        display: flex;
        align-items: center;
        margin: 10px 0;
    }
    
    .typing-indicator span {
        height: 10px;
        width: 10px;
        margin: 0 1px;
        background-color: #9E9E9E;
        display: block;
        border-radius: 50%;
        opacity: 0.4;
    }
    
    .typing-indicator span:nth-of-type(1) {
        animation: 1s blink infinite 0.3333s;
    }
    
    .typing-indicator span:nth-of-type(2) {
        animation: 1s blink infinite 0.6666s;
    }
    
    .typing-indicator span:nth-of-type(3) {
        animation: 1s blink infinite 0.9999s;
    }
    
    @keyframes blink {
        50% {
            opacity: 1;
        }
    }
    
    .document-chip {
        display: inline-block;
        padding: 4px 12px;
        background-color: rgba(156, 39, 176, 0.1);
        border: 1px solid rgba(156, 39, 176, 0.3);
        border-radius: 16px;
        font-size: 0.85rem;
        margin-right: 8px;
        margin-bottom: 8px;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .document-chip:hover {
        background-color: rgba(156, 39, 176, 0.2);
    }
    
    .document-chip i {
        margin-right: 5px;
    }
    
    .rag-toggle {
        cursor: pointer;
    }
    
    .question-use-btn {
        color: var(--primary-color);
        background: none;
        border: none;
        font-size: 0.9rem;
        cursor: pointer;
        padding: 0;
        float: right;
    }
    
    .question-use-btn:hover {
        text-decoration: underline;
    }
    
    /* Document context drawer */
    .context-drawer {
        position: fixed;
        top: 0;
        right: -350px;
        width: 350px;
        height: 100vh;
        background-color: var(--card-bg);
        box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
        transition: right 0.3s ease;
        z-index: 1000;
        overflow-y: auto;
    }
    
    .context-drawer.open {
        right: 0;
    }
    
    .context-drawer-header {
        padding: 15px;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .context-drawer-body {
        padding: 15px;
    }
    
    .context-drawer-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease;
    }
    
    .context-drawer-backdrop.open {
        opacity: 1;
        visibility: visible;
    }
    
    .document-preview {
        margin-bottom: 15px;
        padding: 10px;
        background-color: rgba(0, 0, 0, 0.05);
        border-radius: 8px;
        font-size: 0.9rem;
    }
    
    .document-preview-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
        font-weight: bold;
    }
    
    .document-preview-content {
        max-height: 200px;
        overflow-y: auto;
        white-space: pre-wrap;
        font-family: monospace;
        font-size: 0.8rem;
        background-color: var(--card-bg);
        padding: 8px;
        border-radius: 4px;
    }
</style>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1 class="mb-4">Socratic Chat</h1>
    
    <div class="row">
        <div class="col-md-9">
            <div class="chat-container">
                <div id="chatMessages" class="chat-messages">
                    <div class="message assistant-message">
                        Hello! I'm the Socratic Clarifier. I can help analyze your statements for logical issues and ask questions to help clarify your thinking. What would you like to discuss today?
                    </div>
                </div>
                <div class="typing-indicator d-none" id="typingIndicator">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
                <div class="chat-input">
                    <div class="chat-input-wrapper">
                        <textarea id="messageInput" class="form-control" placeholder="Type your message here..." rows="2"></textarea>
                        <div class="input-actions">
                            <button class="input-action-btn" id="attachDocumentBtn" title="Attach Document">
                                <i class="bi bi-paperclip"></i>
                            </button>
                        </div>
                    </div>
                    <button id="sendButton" class="btn btn-primary">
                        <i class="bi bi-send-fill"></i>
                    </button>
                </div>
                
                <!-- Document Context Section (if documents are attached) -->
                <div id="documentContext" class="mt-3 d-none">
                    <div class="d-flex align-items-center mb-2">
                        <h6 class="mb-0 me-2"><i class="bi bi-file-earmark-text"></i> Using Document Context:</h6>
                        <div id="documentChips"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card sticky-top" style="top: 80px;">
                <div class="card-header">
                    <h5 class="mb-0">Chat Settings</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label for="modeSelect" class="form-label">Operating Mode</label>
                        <select id="modeSelect" class="form-select">
                            {% for mode in modes %}
                            <option value="{{ mode }}">{{ mode|capitalize }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="showAnalysisSwitch" checked>
                        <label class="form-check-label" for="showAnalysisSwitch">Show Analysis Details</label>
                    </div>
                    
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="useSoTSwitch" checked>
                        <label class="form-check-label" for="useSoTSwitch">Use Sequential Thinking</label>
                    </div>
                    
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input rag-toggle" type="checkbox" id="useRAGSwitch" checked>
                        <label class="form-check-label rag-toggle" for="useRAGSwitch">Use Document Context</label>
                    </div>
                    
                    <div id="modelInfo" class="mb-3">
                        <h6>Model Information</h6>
                        <div class="small">
                            <p><strong>LLM:</strong> <span id="currentLLM">llama3</span></p>
                            <p><strong>SoT Enabled:</strong> <span id="sotEnabled">Yes</span></p>
                            <p><strong>Provider:</strong> <span id="providerName">ollama</span></p>
                        </div>
                    </div>
                    
                    <div class="d-grid gap-2">
                        <button id="clearChatBtn" class="btn btn-outline-secondary btn-sm">
                            <i class="bi bi-trash"></i> Clear Chat
                        </button>
                        <button id="viewDocumentsBtn" class="btn btn-outline-primary btn-sm">
                            <i class="bi bi-files"></i> View Document Library
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Document Context Drawer -->
<div class="context-drawer" id="contextDrawer">
    <div class="context-drawer-header">
        <h5 class="mb-0">Document Context</h5>
        <button class="btn-close" id="closeContextDrawer"></button>
    </div>
    <div class="context-drawer-body">
        <div class="mb-3">
            <h6>Available Documents</h6>
            <div id="documentList" class="document-list">
                <!-- Documents will be loaded here -->
                <div class="placeholder-text text-muted">Loading documents...</div>
            </div>
        </div>
        
        <hr>
        
        <div class="mb-3">
            <h6>Selected Documents</h6>
            <div id="selectedDocuments">
                <!-- Selected documents will appear here -->
                <div class="placeholder-text text-muted">No documents selected</div>
            </div>
        </div>
        
        <div class="d-grid gap-2">
            <button id="applyContextBtn" class="btn btn-primary">
                <i class="bi bi-check-circle"></i> Apply Selected Documents
            </button>
            <button id="uploadDocumentBtn" class="btn btn-outline-secondary">
                <i class="bi bi-upload"></i> Upload New Document
            </button>
        </div>
    </div>
</div>
<div class="context-drawer-backdrop" id="contextDrawerBackdrop"></div>

<!-- Document Upload Modal -->
<div class="modal fade" id="uploadDocumentModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Upload Document</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="uploadDocumentForm">
                    <div class="mb-3">
                        <label for="documentFile" class="form-label">Select Document</label>
                        <input type="file" class="form-control" id="documentFile" accept=".pdf,.png,.jpg,.jpeg,.txt,.md">
                        <div class="form-text">Supported formats: PDF, PNG, JPG, TXT, MD</div>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="generateEmbeddingsCheck" checked>
                        <label class="form-check-label" for="generateEmbeddingsCheck">
                            Generate embeddings for retrieval
                        </label>
                    </div>
                </form>
                <div class="upload-progress d-none">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                    </div>
                    <p class="mt-2 text-center" id="uploadStatus">Uploading...</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="uploadDocumentSubmit">Upload</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block additional_js %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const chatMessages = document.getElementById('chatMessages');
        const typingIndicator = document.getElementById('typingIndicator');
        const modeSelect = document.getElementById('modeSelect');
        const showAnalysisSwitch = document.getElementById('showAnalysisSwitch');
        const useSoTSwitch = document.getElementById('useSoTSwitch');
        const useRAGSwitch = document.getElementById('useRAGSwitch');
        const clearChatBtn = document.getElementById('clearChatBtn');
        const attachDocumentBtn = document.getElementById('attachDocumentBtn');
        const documentContext = document.getElementById('documentContext');
        const documentChips = document.getElementById('documentChips');
        const viewDocumentsBtn = document.getElementById('viewDocumentsBtn');
        
        // Context drawer elements
        const contextDrawer = document.getElementById('contextDrawer');
        const contextDrawerBackdrop = document.getElementById('contextDrawerBackdrop');
        const closeContextDrawer = document.getElementById('closeContextDrawer');
        const documentList = document.getElementById('documentList');
        const selectedDocuments = document.getElementById('selectedDocuments');
        const applyContextBtn = document.getElementById('applyContextBtn');
        const uploadDocumentBtn = document.getElementById('uploadDocumentBtn');
        
        // Upload modal elements
        const uploadDocumentModal = new bootstrap.Modal(document.getElementById('uploadDocumentModal'));
        const uploadDocumentForm = document.getElementById('uploadDocumentForm');
        const documentFile = document.getElementById('documentFile');
        const generateEmbeddingsCheck = document.getElementById('generateEmbeddingsCheck');
        const uploadDocumentSubmit = document.getElementById('uploadDocumentSubmit');
        const uploadProgress = document.querySelector('.upload-progress');
        const progressBar = document.querySelector('.progress-bar');
        const uploadStatus = document.getElementById('uploadStatus');
        
        // Store the active documents
        let activeDocuments = [];
        let allDocuments = [];

        // Check for redirected text from dashboard
        const chatRedirectText = sessionStorage.getItem('chatRedirectText');
        const chatRedirectQuestions = JSON.parse(sessionStorage.getItem('chatRedirectQuestions') || '[]');
        
        if (chatRedirectText) {
            // Add the text to the input
            messageInput.value = chatRedirectText;
            
            // Clear the session storage
            sessionStorage.removeItem('chatRedirectText');
            sessionStorage.removeItem('chatRedirectQuestions');
            
            // If there are questions, add a system message about them
            if (chatRedirectQuestions && chatRedirectQuestions.length > 0) {
                addSystemMessage(`Transferred from dashboard analysis with ${chatRedirectQuestions.length} related questions.`);
                
                // Add first question as assistant message
                addMessage(
                    `I see you're exploring: "${chatRedirectText}". ${chatRedirectQuestions[0]}`, 
                    'assistant', 
                    { 
                        questions: chatRedirectQuestions,
                        redirected: true
                    }
                );
            }
        }
        
        // Event listener for send button
        sendButton.addEventListener('click', sendMessage);
        
        // Event listener for enter key
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
        
        // Clear chat button
        clearChatBtn.addEventListener('click', function() {
            if (confirm('Are you sure you want to clear the chat history?')) {
                // Keep only the first welcome message
                while (chatMessages.childNodes.length > 1) {
                    chatMessages.removeChild(chatMessages.lastChild);
                }
                
                // Clear any active documents
                activeDocuments = [];
                documentContext.classList.add('d-none');
                documentChips.innerHTML = '';
            }
        });
        
        // Attach document button
        attachDocumentBtn.addEventListener('click', function() {
            // Open the context drawer
            openContextDrawer();
            
            // Load the document list
            loadDocuments();
        });
        
        // View documents button
        viewDocumentsBtn.addEventListener('click', function() {
            openContextDrawer();
            loadDocuments();
        });
        
        // Context drawer close button
        closeContextDrawer.addEventListener('click', closeContextDrawer);
        
        // Context drawer backdrop
        contextDrawerBackdrop.addEventListener('click', closeContextDrawer);
        
        // Apply context button
        applyContextBtn.addEventListener('click', function() {
            // Get selected documents
            const selectedDocs = [...document.querySelectorAll('.document-select:checked')].map(checkbox => {
                const docId = checkbox.value;
                const doc = allDocuments.find(d => d.id === docId);
                return doc;
            });
            
            // Update active documents
            activeDocuments = selectedDocs;
            
            // Update UI
            updateDocumentContext();
            
            // Close the drawer
            closeContextDrawer();
        });
        
        // Upload document button
        uploadDocumentBtn.addEventListener('click', function() {
            // Open the upload modal
            uploadDocumentModal.show();
            
            // Reset the form
            uploadDocumentForm.reset();
            uploadProgress.classList.add('d-none');
            progressBar.style.width = '0%';
        });
        
        // Upload document submit
        uploadDocumentSubmit.addEventListener('click', function() {
            const file = documentFile.files[0];
            if (!file) {
                alert('Please select a file to upload.');
                return;
            }
            
            // Show progress
            uploadProgress.classList.remove('d-none');
            uploadDocumentSubmit.disabled = true;
            
            // Create form data
            const formData = new FormData();
            formData.append('file', file);
            formData.append('generate_embeddings', generateEmbeddingsCheck.checked ? '1' : '0');
            
            // Upload the file
            fetch('/api/documents/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    uploadStatus.textContent = 'Upload successful!';
                    progressBar.style.width = '100%';
                    
                    // Wait a moment and close the modal
                    setTimeout(() => {
                        uploadDocumentModal.hide();
                        uploadDocumentSubmit.disabled = false;
                        
                        // Reload the document list
                        loadDocuments();
                    }, 1000);
                } else {
                    uploadStatus.textContent = `Error: ${data.error}`;
                    progressBar.style.width = '100%';
                    progressBar.classList.remove('bg-primary');
                    progressBar.classList.add('bg-danger');
                    
                    // Re-enable the submit button
                    uploadDocumentSubmit.disabled = false;
                }
            })
            .catch(error => {
                uploadStatus.textContent = `Error: ${error.message}`;
                progressBar.style.width = '100%';
                progressBar.classList.remove('bg-primary');
                progressBar.classList.add('bg-danger');
                
                // Re-enable the submit button
                uploadDocumentSubmit.disabled = false;
            });
        });
        
        // Function to open context drawer
        function openContextDrawer() {
            contextDrawer.classList.add('open');
            contextDrawerBackdrop.classList.add('open');
            document.body.style.overflow = 'hidden';
        }
        
        // Function to close context drawer
        function closeContextDrawer() {
            contextDrawer.classList.remove('open');
            contextDrawerBackdrop.classList.remove('open');
            document.body.style.overflow = '';
        }
        
        // Function to load documents
        function loadDocuments() {
            documentList.innerHTML = '<div class="placeholder-text text-muted">Loading documents...</div>';
            
            fetch('/api/documents')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        allDocuments = data.documents;
                        
                        if (data.documents.length === 0) {
                            documentList.innerHTML = '<div class="placeholder-text text-muted">No documents available</div>';
                        } else {
                            documentList.innerHTML = '';
                            
                            // Create document list items
                            data.documents.forEach(doc => {
                                const docItem = document.createElement('div');
                                docItem.className = 'document-preview';
                                
                                // Determine if this document is active
                                const isActive = activeDocuments.some(d => d.id === doc.id);
                                
                                // Create document HTML
                                docItem.innerHTML = `
                                    <div class="document-preview-header">
                                        <div class="form-check">
                                            <input class="form-check-input document-select" type="checkbox" value="${doc.id}" id="doc-${doc.id}" ${isActive ? 'checked' : ''}>
                                            <label class="form-check-label" for="doc-${doc.id}">
                                                ${doc.filename}
                                            </label>
                                        </div>
                                        <span class="badge bg-secondary">${formatSize(doc.file_size)}</span>
                                    </div>
                                    <div class="text-muted small mb-2">
                                        Uploaded: ${formatDate(doc.upload_date)}
                                    </div>
                                `;
                                
                                documentList.appendChild(docItem);
                                
                                // Add a preview button to fetch the document content
                                const previewBtn = document.createElement('button');
                                previewBtn.className = 'btn btn-sm btn-outline-secondary w-100';
                                previewBtn.innerHTML = '<i class="bi bi-eye"></i> Preview Document';
                                previewBtn.addEventListener('click', () => {
                                    previewDocument(doc.id);
                                });
                                docItem.appendChild(previewBtn);
                            });
                            
                            // Update selected documents display
                            updateSelectedDocuments();
                        }
                    } else {
                        documentList.innerHTML = `<div class="alert alert-danger">Error loading documents: ${data.error}</div>`;
                    }
                })
                .catch(error => {
                    documentList.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
                });
        }
        
        // Function to preview document
        function previewDocument(docId) {
            fetch(`/api/documents/${docId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const doc = data.document;
                        const docItem = document.getElementById(`doc-${docId}`).closest('.document-preview');
                        
                        // Check if preview already exists
                        const existingPreview = docItem.querySelector('.document-preview-content');
                        if (existingPreview) {
                            existingPreview.remove();
                            return;
                        }
                        
                        // Create preview content
                        const previewContent = document.createElement('div');
                        previewContent.className = 'document-preview-content mt-2';
                        previewContent.textContent = doc.text_content.substring(0, 500) + 
                            (doc.text_content.length > 500 ? '...' : '');
                        
                        docItem.appendChild(previewContent);
                    } else {
                        alert(`Error loading document: ${data.error}`);
                    }
                })
                .catch(error => {
                    alert(`Error: ${error.message}`);
                });
        }
        
        // Function to update selected documents display
        function updateSelectedDocuments() {
            const selectedDocs = [...document.querySelectorAll('.document-select:checked')].map(checkbox => {
                const docId = checkbox.value;
                const doc = allDocuments.find(d => d.id === docId);
                return doc;
            });
            
            if (selectedDocs.length === 0) {
                selectedDocuments.innerHTML = '<div class="placeholder-text text-muted">No documents selected</div>';
            } else {
                selectedDocuments.innerHTML = '';
                
                selectedDocs.forEach(doc => {
                    const docItem = document.createElement('div');
                    docItem.className = 'document-chip';
                    docItem.innerHTML = `
                        <i class="bi bi-file-earmark-text"></i> ${doc.filename}
                    `;
                    selectedDocuments.appendChild(docItem);
                });
            }
        }
        
        // Listen for changes to document selection
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('document-select')) {
                updateSelectedDocuments();
            }
        });
        
        // Function to update document context display
        function updateDocumentContext() {
            if (activeDocuments.length === 0) {
                documentContext.classList.add('d-none');
                documentChips.innerHTML = '';
            } else {
                documentContext.classList.remove('d-none');
                documentChips.innerHTML = '';
                
                activeDocuments.forEach(doc => {
                    const chip = document.createElement('div');
                    chip.className = 'document-chip';
                    chip.innerHTML = `
                        <i class="bi bi-file-earmark-text"></i> ${doc.filename}
                    `;
                    
                    // Add remove button
                    const removeBtn = document.createElement('i');
                    removeBtn.className = 'bi bi-x ms-1';
                    removeBtn.style.cursor = 'pointer';
                    removeBtn.addEventListener('click', () => {
                        // Remove document from active list
                        activeDocuments = activeDocuments.filter(d => d.id !== doc.id);
                        updateDocumentContext();
                    });
                    chip.appendChild(removeBtn);
                    
                    documentChips.appendChild(chip);
                });
            }
        }
        
        function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;
            
            // Add user message to chat
            addMessage(message, 'user');
            
            // Clear input
            messageInput.value = '';
            
            // Show typing indicator
            typingIndicator.classList.remove('d-none');
            
            // Get current settings
            const mode = modeSelect.value;
            const showAnalysis = showAnalysisSwitch.checked;
            const useSoT = useSoTSwitch.checked;
            const useRAG = useRAGSwitch.checked;
            
            // Prepare document context if RAG is enabled
            let documentContext = [];
            if (useRAG && activeDocuments.length > 0) {
                documentContext = activeDocuments.map(doc => ({
                    document_id: doc.id,
                    filename: doc.filename
                }));
            }
            
            // Make API request to analyze
            fetch('/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message: message,
                    mode: mode,
                    use_sot: useSoT,
                    use_rag: useRAG,
                    document_context: documentContext
                })
            })
            .then(response => response.json())
            .then(data => {
                // Hide typing indicator
                typingIndicator.classList.add('d-none');
                
                if (data.error) {
                    addErrorMessage(data.error);
                    return;
                }
                
                // Add assistant's response
                addMessage(data.reply, 'assistant', showAnalysis ? data : null);
                
                // Update model info
                document.getElementById('currentLLM').textContent = data.model || 'Unknown';
                document.getElementById('sotEnabled').textContent = data.sot_enabled ? 'Yes' : 'No';
                document.getElementById('providerName').textContent = data.provider || 'None';
                
                // Scroll to bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
            })
            .catch(error => {
                typingIndicator.classList.add('d-none');
                addErrorMessage('An error occurred while processing your message: ' + error.message);
            });
            
            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function addMessage(text, sender, analysisData = null) {
            const messageElement = document.createElement('div');
            messageElement.className = `message ${sender}-message`;
            
            // Main message text
            const textElement = document.createElement('div');
            textElement.textContent = text;
            messageElement.appendChild(textElement);
            
            // If it's an assistant message and we have analysis data, add it
            if (sender === 'assistant' && analysisData) {
                // Issues section
                if (analysisData.issues && analysisData.issues.length > 0) {
                    const issuesElement = document.createElement('div');
                    issuesElement.className = 'message-issues';
                    
                    const issuesTitle = document.createElement('strong');
                    issuesTitle.textContent = 'Detected Issues:';
                    issuesElement.appendChild(issuesTitle);
                    
                    const issuesList = document.createElement('ul');
                    issuesList.className = 'mb-0 mt-1';
                    
                    analysisData.issues.forEach(issue => {
                        const issueItem = document.createElement('li');
                        issueItem.innerHTML = `<strong>${issue.issue}:</strong> "${issue.term}" - ${issue.description}`;
                        issuesList.appendChild(issueItem);
                    });
                    
                    issuesElement.appendChild(issuesList);
                    messageElement.appendChild(issuesElement);
                }
                
                // Questions section
                if (analysisData.questions && analysisData.questions.length > 0) {
                    const questionsElement = document.createElement('div');
                    questionsElement.className = 'message-questions';
                    
                    const questionsTitle = document.createElement('strong');
                    questionsTitle.textContent = 'Socratic Questions:';
                    questionsElement.appendChild(questionsTitle);
                    
                    const questionsList = document.createElement('ul');
                    questionsList.className = 'mb-0 mt-1';
                    
                    analysisData.questions.forEach(question => {
                        const questionItem = document.createElement('li');
                        
                        // Create question text and "use this" button for follow-up
                        const questionText = document.createElement('span');
                        questionText.textContent = question;
                        questionItem.appendChild(questionText);
                        
                        // Add a "use this" button to use the question as a response
                        if (!analysisData.redirected) {
                            const useButton = document.createElement('button');
                            useButton.className = 'question-use-btn';
                            useButton.innerHTML = '<i class="bi bi-chat-left-text"></i> Use';
                            useButton.addEventListener('click', function() {
                                messageInput.value = question;
                                messageInput.focus();
                            });
                            questionItem.appendChild(useButton);
                        }
                        
                        questionsList.appendChild(questionItem);
                    });
                    
                    questionsElement.appendChild(questionsList);
                    messageElement.appendChild(questionsElement);
                }
                
                // Reasoning section
                if (analysisData.reasoning) {
                    const reasoningElement = document.createElement('div');
                    reasoningElement.className = 'message-reasoning';
                    
                    const reasoningTitle = document.createElement('strong');
                    reasoningTitle.textContent = `SoT Reasoning (${analysisData.sot_paradigm || 'default'}):`;
                    reasoningElement.appendChild(reasoningTitle);
                    
                    const reasoningText = document.createElement('pre');
                    reasoningText.className = 'mb-0 mt-1';
                    reasoningText.textContent = analysisData.reasoning;
                    
                    reasoningElement.appendChild(reasoningText);
                    messageElement.appendChild(reasoningElement);
                }
                
                // Document context section
                if (analysisData.document_context && analysisData.document_context.length > 0) {
                    const documentElement = document.createElement('div');
                    documentElement.className = 'message-document';
                    
                    const documentTitle = document.createElement('strong');
                    documentTitle.textContent = 'Document Context Used:';
                    documentElement.appendChild(documentTitle);
                    
                    const documentList = document.createElement('ul');
                    documentList.className = 'mb-0 mt-1';
                    
                    analysisData.document_context.forEach(doc => {
                        const documentItem = document.createElement('li');
                        documentItem.innerHTML = `<strong>${doc.filename}</strong> - Relevance: ${(doc.relevance * 100).toFixed(0)}%`;
                        documentList.appendChild(documentItem);
                    });
                    
                    documentElement.appendChild(documentList);
                    messageElement.appendChild(documentElement);
                }
            }
            
            chatMessages.appendChild(messageElement);
            
            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function addSystemMessage(text) {
            const messageElement = document.createElement('div');
            messageElement.className = 'message system-message';
            messageElement.textContent = text;
            chatMessages.appendChild(messageElement);
            
            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function addErrorMessage(text) {
            const messageElement = document.createElement('div');
            messageElement.className = 'message assistant-message';
            messageElement.style.backgroundColor = '#f8d7da';
            messageElement.textContent = 'Error: ' + text;
            chatMessages.appendChild(messageElement);
            
            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Helper function to format file size
        function formatSize(bytes) {
            if (bytes < 1024) return bytes + ' B';
            if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
            return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
        }
        
        // Helper function to format date
        function formatDate(dateStr) {
            const date = new Date(dateStr);
            return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
        }
    });
</script>
{% endblock %}